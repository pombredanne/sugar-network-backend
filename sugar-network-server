#!/usr/bin/env python

# Copyright (C) 2012 Aleksey Lim
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import locale
import logging

import active_document as ad
import sugar_network_webui as webui
from active_toolkit import coroutine, application
from active_toolkit.options import Option
from sugar_network import node, local, Client
from sugar_network.local.mounts import LocalMount
from sugar_network.local.mountset import Mountset
from sugar_network.local.mounts import LocalMount
from sugar_network.node import stats
from sugar_network.node.router import Router
from sugar_network.node.commands import MasterCommands
from sugar_network.node.subscribe_socket import SubscribeSocket
from sugar_network.resources.volume import Volume
from sugar_network.toolkit import sugar, sneakernet


class Application(application.Daemon):

    servers = coroutine.ServersPool()
    jobs = coroutine.Pool()

    def run(self):
        sneakernet.TMPDIR = node.tmpdir.value

        ssl_args = {}
        if node.keyfile.value:
            ssl_args['keyfile'] = node.keyfile.value
        if node.certfile.value:
            ssl_args['certfile'] = node.certfile.value

        volume = Volume(node.data_root.value)
        self.jobs.spawn(volume.populate)
        subscriber = SubscribeSocket(volume,
                node.host.value, node.subscribe_port.value)
        cp = MasterCommands(volume, subscriber)

        logging.info('Listening for requests on %s:%s',
                node.host.value, node.port.value)
        self.servers.spawn(coroutine.WSGIServer,
                (node.host.value, node.port.value), Router(cp), **ssl_args)

        logging.info('Listening for subscriptions on %s:%s',
                node.host.value, node.subscribe_port.value)
        self.servers.spawn(subscriber)

        if webui.webui.value:
            # XXX Until implementing regular web users
            sugar.uid = lambda: 'demo'
            sugar.nickname = lambda: 'demo'
            sugar.color = lambda: '#000000,#000000'

            # Point client API to volume directly
            local.mounts_root.value = None
            mountset = Mountset(None)
            mountset['/'] = LocalMount(volume)
            Client.connection = mountset

            host = (webui.webui_host.value, webui.webui_port.value)
            logging.info('Start Web server on %s:%s port', *host)
            self.servers.spawn(coroutine.WSGIServer, host, webui.get_app())

        try:
            self.servers.join()
        finally:
            self.jobs.kill()
            volume.close()

    def shutdown(self):
        self.servers.stop()


locale.setlocale(locale.LC_ALL, '')

Option.seek('main', application)
Option.seek('webui', webui)
Option.seek('node', node)
Option.seek('stats', stats)
Option.seek('active-document', ad)

app = Application(
        name='sugar-network-server',
        description='Sugar Network server',
        epilog='See http://wiki.sugarlabs.org/go/Sugar_Network ' \
                 'for details.',
        config_files=[
            '/etc/sugar-network-server/config',
            '~/.config/sugar-network-server/config',
            ])
app.start()
