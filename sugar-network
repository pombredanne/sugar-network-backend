#!/usr/bin/env python

# Copyright (C) 2012, Aleksey Lim
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import shutil
from gettext import gettext as _

import zerosugar
import sweets_recipe
import sugar_network
from local_document import application, sugar, activities, env, printf
from active_document import util, optparse, enforce


command = optparse.Option(
        _('if context implementation supports several commands, ' \
                'specify one of them to launch'),
        default='activity', short_option='-C')


class Application(application.Application):

    @application.command(
            'CONTEXT [RESTRICTION] [ARGS]\n'
            'if context is associatad with software, launch one of its '
            'implementations')
    def launch(self):
        enforce(self.args, _('Context is not specified'))
        context = self.args.pop(0)

        client = sugar_network.Client('/')
        zerosugar.launch(client, context, command.value, self.args)

    @application.command(
            'CONTEXT\n'
            'if context is associatad with software, download one of its '
            'implementations and place it to ~/Activities')
    def checkin(self):
        enforce(self.args, _('Context is not specified'))
        context = self.args.pop(0)

        client = sugar_network.Client('/')

        solution = zerosugar.make(client, context)
        for sel, __, __ in solution.walk():
            try:
                spec = sweets_recipe.Spec(root=sel.local_path)
            except Exception, error:
                printf.exception(
                        _('Cannot checkin %r, failed to read spec file: %s'),
                        sel.interface, error)
                continue

            dst_path = util.unique_filename(
                    env.activities_root.value, spec['name'] + '.activity')
            printf.info(_('Checkin %r implementation to %r'),
                    context, dst_path)
            util.cptree(sel.local_path, dst_path)

    @application.command(
            'CONTEXT\n'
            'delete all implementations downloaded by "checkin" command')
    def checkout(self):
        enforce(self.args, _('Context is not specified'))
        context = self.args.pop(0)

        for path in activities.checkins(context):
            printf.info(_('Checkout %r implementation from %r'),
                    context, path)
            shutil.rmtree(path)

# New defaults
application.debug.value = sugar.logger_level()

optparse.Option.seek('sugar-network')
optparse.Option.seek('sugar-network', [application.debug])

app = Application(
        name='sugar-network',
        description=_('Sugar Network client utility'),
        epilog=_('See http://wiki.sugarlabs.org/go/Sugar_Network ' \
                 'for details.'),
        where={
            'CONTEXT':
                _('context GUID or name context should implement'),
            'RESTRICTION':
                _('particular context implementation in form of:\n' \
                        '=|>=|< VERSION'),
            'ARGS':
                _('arbitrary command-line arguments to pass as-is to ' \
                        'launching context implementation'),
                },
        config_files=[
            '/etc/sweets.conf',
            '~/.config/sweets/config',
            sugar.profile_path('sweets.conf'),
            ],
        stop_args=['launch'])
app.start()
